import React, { useState, useCallback, useEffect } from "react";
import styles from "../../styles/Home.module.css";
import Footer from "../footer/Footer";
import { useSelector } from "react-redux";
import { RootState } from "../../reducer";
import Header from "../header/Header";
import {
  NoticeTop,
  NoticeBody,
  Wrapper,
  BodyTop,
  NoticeList,
  BtnSection,
} from "../../components/notice/style";
import Link from "next/link";
import { formatDate } from "../../lib/factory";
import Head from "next/head";
import { GetServerSideProps } from "next";
import { getNotice } from "../../firebase/store";

interface dataFace {
  title:string;
  timestamp:number;
  index:number;
}

function Index({data}:{data:Array<dataFace>}) {
  const length = parseInt(String(data.length / 10))
  const agent = useSelector(
    (state: RootState) => state.config.identification.agent
  );
  const [isHead, setIsHead] = useState(false);
  const [paging, setPaging] = useState(1);
  const [ogList, setOgList] = useState(data)
  const [List, setList] = useState<dataFace[]>([]);
  const __changePaging = useCallback(
    (type: string) => {
      console.log(paging);
      if (type === "plus") {
        setPaging(paging + 1);
      } else {
        setPaging(paging - 1);
      }
    },
    [paging]
  );
  
  const __scrollHandle = useCallback(() => {
    if (window.scrollY <= 157) {
      if (isHead) {
        setIsHead(false);
      }
    }
    if (window.scrollY >= 158) {
      if (!isHead) {
        setIsHead(true);
      }
    }
  }, [isHead]);
  const __searchTitle = useCallback(
    (e) => {
      if (e.target.value) {
        const searching = data.filter(({title},idx)=>title.includes(e.target.value))
        setOgList(searching)
      }else {
        setOgList(data)
      }
    },
    [data],
  )
  useEffect(() => {
    document.addEventListener("scroll", __scrollHandle);
    return () => {
      document.removeEventListener("scroll", __scrollHandle);
    };
  }, [__scrollHandle]);
 useEffect(() => {
    const filt = ogList.slice(parseInt(`${paging >1 ? paging : ''}0`),parseInt(`${paging  === 0 ? 1 : paging}0`))
    setList(filt)
 
   return () => {
   }
 }, [paging,ogList])
  return (
    <div>
      <Head>
        <title> 아주 건설 : 공지사항</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header agent={agent} isHead={isHead} />
      <NoticeTop>공지사항</NoticeTop>
      <NoticeBody>
        <Wrapper>
          <BodyTop>
            <div className="title">
              아주종합건설의 <br /> 다양한 소식을 만나보세요
            </div>
            <div className="search">
              <input type="text" placeholder="검색어를 입력해주세요" onChange={__searchTitle}/>
              <img src="/assets/grey-search.svg" alt="검색" />
            </div>
          </BodyTop>
          <NoticeList>
            {List.map(({ title, timestamp ,index }, idx) => {
              return (
                <Link href={`/detail/notice-${timestamp}`} key={idx}>
                  <a className="card">
                    <div className="left">
                      <div className="num">{data.length - index}</div>
                      <div className="title">{title}</div>
                    </div>
                    <div className="time">{formatDate(timestamp, ".")}</div>
                  </a>
                </Link>
              );
            })}
          </NoticeList>
          <BtnSection>
            <img
              src="/assets/left-arrow.svg"
              alt="뒤로가기"
              className="left"
              onClick={() => {
                if (paging > 1) {
                  __changePaging("minus");
                }
              }}
            />
            <div className="page"
            style={length !== 0 && paging <length  ? undefined: {
              display:'flex',
              justifyContent:'center',
              alignItems:"center"
            }}
            >
              <div className="now">{paging}</div>
              {length !== 0 && paging <length ?
              <div
                className="next"
                onClick={() => {
                      __changePaging("plus");
                }}
              >
                {paging + 1}
              </div> : undefined}
            </div>
            <img
              src="/assets/right-arrow.svg"
              alt="더보기"
              className="right"
              onClick={() => {
                if (length !== 0 && paging <length) {
                __changePaging("plus");                  
                }

              }}
            />
          </BtnSection>
        </Wrapper>
      </NoticeBody>
      <footer className={styles.footer}>
        <Footer agent={agent} />
      </footer>
    </div>
  );
}

export const getServerSideProps: GetServerSideProps = async () => {
  let data
  await getNotice().then((res)=>{
   data=res
  })
  return {
    props:{
      data
    }
  }
}
export default Index;
